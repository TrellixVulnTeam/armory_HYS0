#!/usr/bin/env python3
# coding=utf-8

import sys
import ar.protocol as proc
import os
import subprocess
import configparser
import distutils.version as Versions
import io

pid = str(os.getpid());

def debug(*args):
    sys.stderr.write(pid+":"+' '.join(map(str,args)) + '\n')

proc.write_msg(sys.stdout, "helo v=1.0.0");

outgoing = []

    
def pull_module(module, version):

    dir = os.getcwd()+os.sep+'modules'+os.sep+module+os.sep
    if not os.path.exists(dir):
        debug(module+' does not exist');
        sys.exit(1)
        
    versions = configparser.SafeConfigParser();
    versions.read(dir+'VERSIONS')
    
    latest = None
    for version in versions.sections():
        v = Versions.LooseVersion(version)
        
        if not latest:
            latest = v;
        elif v > latest:
            latest = v
            
    
    debug("latest="+str(latest))
    pack = os.getcwd()+os.sep+'packages'+os.sep+module+'-'+str(latest)+'.pack'
    if os.path.exists(pack):
        debug("pack="+pack)
        with io.open(sys.stdout.fileno(), mode='wb', closefd=False) as f:
            proc.write_file(f, pack, 0)
    else:
        debug("missing pack="+pack)
        sys.exit(1);
        
def pull_configuration(module, version):

    dir = os.getcwd()+os.sep+'configurations'+os.sep+module+os.sep
    if not os.path.exists(dir):
        debug(module+' does not exist');
        sys.exit(1)
        
    versions = configparser.SafeConfigParser();
    versions.read(dir+'VERSIONS')
    
    latest = None
    for version in versions.sections():
        v = Versions.LooseVersion(version)
        
        if not latest:
            latest = v;
        elif v > latest:
            latest = v
            
    
    debug("latest="+str(latest))
    pack = os.getcwd()+os.sep+'packages'+os.sep+module+'-'+str(latest)+'.pack'
    if os.path.exists(pack):
        debug("pack="+pack)
        with io.open(sys.stdout.fileno(), mode='wb', closefd=False) as f:
            proc.write_file(f, pack, 0)
    else:
        debug("missing pack="+pack)
        sys.exit(1);

        
def pull_branch(branch):
    if os.path.exists(branch):
        proc.write_file(sys.stdout, branch, 0)
    else:
        debug("missing branch="+branch)
        sys.exit(1)
    

while True:

    msg = proc.read_msg(sys.stdin)
    
    if msg.msg == 'ok':
        debug("ok")
        break
    elif msg.msg == 'pull':
        debug("pull")
        outgoing.append(msg.params[0])
    else:
        debug("error")
        proc.write_msg(sys.stdout, "error")
        sys.exit(1)

proc.write_msg(sys.stdout, "accept");

for req in outgoing:
    debug("outgoing "+req)
    
    path = req.split('/')[1:]
    
    if path[0] == 'modules':
        pull_module(path[1], path[2])
    elif path[0] == 'branch':
        pull_branch(path[1])
        
    debug(str(path))
